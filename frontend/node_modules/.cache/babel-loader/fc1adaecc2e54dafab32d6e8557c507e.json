{"ast":null,"code":"// External libraries are lazy-loaded only if these file types exist.\nvar Yaml = null,\n    VisionmediaYaml = null,\n    Coffee = null,\n    Iced = null,\n    CSON = null,\n    PPARSER = null,\n    JSON5 = null,\n    TOML = null,\n    HJSON = null,\n    XML = null; // Define soft dependencies so transpilers don't include everything\n\nvar COFFEE_2_DEP = 'coffeescript',\n    COFFEE_DEP = 'coffee-script',\n    ICED_DEP = 'iced-coffee-script',\n    JS_YAML_DEP = 'js-yaml',\n    YAML_DEP = 'yaml',\n    JSON5_DEP = 'json5',\n    HJSON_DEP = 'hjson',\n    TOML_DEP = 'toml',\n    CSON_DEP = 'cson',\n    PPARSER_DEP = 'properties',\n    XML_DEP = 'x2js',\n    TS_DEP = 'ts-node';\nvar Parser = module.exports;\n\nParser.parse = function (filename, content) {\n  var parserName = filename.substr(filename.lastIndexOf('.') + 1); // file extension\n\n  if (typeof definitions[parserName] === 'function') {\n    return definitions[parserName](filename, content);\n  } // TODO: decide what to do in case of a missing parser\n\n};\n\nParser.xmlParser = function (filename, content) {\n  if (!XML) {\n    XML = require(XML_DEP);\n  }\n\n  var x2js = new XML();\n  var configObject = x2js.xml2js(content);\n  var rootKeys = Object.keys(configObject);\n\n  if (rootKeys.length === 1) {\n    return configObject[rootKeys[0]];\n  }\n\n  return configObject;\n};\n\nParser.jsParser = function (filename, content) {\n  return require(filename);\n};\n\nParser.tsParser = function (filename, content) {\n  if (!require.extensions['.ts']) {\n    require(TS_DEP).register({\n      lazy: true,\n      transpileOnly: true,\n      compilerOptions: {\n        allowJs: true\n      }\n    });\n  } // Imports config if it is exported via module.exports = ...\n  // See https://github.com/lorenwest/node-config/issues/524\n\n\n  var configObject = require(filename); // Because of ES6 modules usage, `default` is treated as named export (like any other)\n  // Therefore config is a value of `default` key.\n\n\n  if (configObject.default) {\n    return configObject.default;\n  }\n\n  return configObject;\n};\n\nParser.coffeeParser = function (filename, content) {\n  // .coffee files can be loaded with either coffee-script or iced-coffee-script.\n  // Prefer iced-coffee-script, if it exists.\n  // Lazy load the appropriate extension\n  if (!Coffee) {\n    Coffee = {}; // The following enables iced-coffee-script on .coffee files, if iced-coffee-script is available.\n    // This is commented as per a decision on a pull request.\n    //try {\n    //  Coffee = require('iced-coffee-script');\n    //}\n    //catch (e) {\n    //  Coffee = require('coffee-script');\n    //}\n\n    try {\n      // Try to load coffeescript\n      Coffee = require(COFFEE_2_DEP);\n    } catch (e) {\n      // If it doesn't exist, try to load it using the deprecated module name\n      Coffee = require(COFFEE_DEP);\n    } // coffee-script >= 1.7.0 requires explicit registration for require() to work\n\n\n    if (Coffee.register) {\n      Coffee.register();\n    }\n  } // Use the built-in parser for .coffee files with coffee-script\n\n\n  return require(filename);\n};\n\nParser.icedParser = function (filename, content) {\n  Iced = require(ICED_DEP); // coffee-script >= 1.7.0 requires explicit registration for require() to work\n\n  if (Iced.register) {\n    Iced.register();\n  }\n};\n\nParser.yamlParser = function (filename, content) {\n  if (!Yaml && !VisionmediaYaml) {\n    // Lazy loading\n    try {\n      // Try to load the better js-yaml module\n      Yaml = require(JS_YAML_DEP);\n    } catch (e) {\n      try {\n        // If it doesn't exist, load the fallback visionmedia yaml module.\n        VisionmediaYaml = require(YAML_DEP);\n      } catch (e) {}\n    }\n  }\n\n  if (Yaml) {\n    return Yaml.load(content);\n  } else if (VisionmediaYaml) {\n    // The yaml library doesn't like strings that have newlines but don't\n    // end in a newline: https://github.com/visionmedia/js-yaml/issues/issue/13\n    content += '\\n';\n\n    if (typeof VisionmediaYaml.eval === 'function') {\n      return VisionmediaYaml.eval(Parser.stripYamlComments(content));\n    }\n\n    return VisionmediaYaml.parse(Parser.stripYamlComments(content));\n  } else {\n    console.error('No YAML parser loaded.  Suggest adding js-yaml dependency to your package.json file.');\n  }\n};\n\nParser.jsonParser = function (filename, content) {\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    // All JS Style comments will begin with /, so all JSON parse errors that\n    // encountered a syntax error will complain about this character.\n    if (e.name !== 'SyntaxError' || e.message.indexOf('Unexpected token /') !== 0) {\n      throw e;\n    }\n\n    if (!JSON5) {\n      JSON5 = require(JSON5_DEP);\n    }\n\n    return JSON5.parse(content);\n  }\n};\n\nParser.json5Parser = function (filename, content) {\n  if (!JSON5) {\n    JSON5 = require(JSON5_DEP);\n  }\n\n  return JSON5.parse(content);\n};\n\nParser.hjsonParser = function (filename, content) {\n  if (!HJSON) {\n    HJSON = require(HJSON_DEP);\n  }\n\n  return HJSON.parse(content);\n};\n\nParser.tomlParser = function (filename, content) {\n  if (!TOML) {\n    TOML = require(TOML_DEP);\n  }\n\n  return TOML.parse(content);\n};\n\nParser.csonParser = function (filename, content) {\n  if (!CSON) {\n    CSON = require(CSON_DEP);\n  } // Allow comments in CSON files\n\n\n  if (typeof CSON.parseSync === 'function') {\n    return CSON.parseSync(Parser.stripComments(content));\n  }\n\n  return CSON.parse(Parser.stripComments(content));\n};\n\nParser.propertiesParser = function (filename, content) {\n  if (!PPARSER) {\n    PPARSER = require(PPARSER_DEP);\n  }\n\n  return PPARSER.parse(content, {\n    namespaces: true,\n    variables: true,\n    sections: true\n  });\n};\n/**\n * Strip all Javascript type comments from the string.\n *\n * The string is usually a file loaded from the O/S, containing\n * newlines and javascript type comments.\n *\n * Thanks to James Padolsey, and all who contributed to this implementation.\n * http://james.padolsey.com/javascript/javascript-comment-removal-revisted/\n *\n * @protected\n * @method stripComments\n * @param fileStr {string} The string to strip comments from\n * @param stringRegex {RegExp} Optional regular expression to match strings that\n *   make up the config file\n * @return {string} The string with comments stripped.\n */\n\n\nParser.stripComments = function (fileStr, stringRegex) {\n  stringRegex = stringRegex || /(['\"])(\\\\\\1|.)+?\\1/g;\n  var uid = '_' + +new Date(),\n      primitives = [],\n      primIndex = 0;\n  return fileStr\n  /* Remove strings */\n  .replace(stringRegex, function (match) {\n    primitives[primIndex] = match;\n    return uid + '' + primIndex++;\n  })\n  /* Remove Regexes */\n  .replace(/([^\\/])(\\/(?!\\*|\\/)(\\\\\\/|.)+?\\/[gim]{0,3})/g, function (match, $1, $2) {\n    primitives[primIndex] = $2;\n    return $1 + (uid + '') + primIndex++;\n  })\n  /*\n  - Remove single-line comments that contain would-be multi-line delimiters\n      E.g. // Comment /* <--\n  - Remove multi-line comments that contain would be single-line delimiters\n      E.g. /* // <--\n  */\n  .replace(/\\/\\/.*?\\/?\\*.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]*?\\/\\/[\\s\\S]*?\\*\\//g, '')\n  /*\n  Remove single and multi-line comments,\n  no consideration of inner-contents\n  */\n  .replace(/\\/\\/.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]+?\\*\\//g, '')\n  /*\n  Remove multi-line comments that have a replaced ending (string/regex)\n  Greedy, so no inner strings/regexes will stop it.\n  */\n  .replace(RegExp('\\\\/\\\\*[\\\\s\\\\S]+' + uid + '\\\\d+', 'g'), '')\n  /* Bring back strings & regexes */\n  .replace(RegExp(uid + '(\\\\d+)', 'g'), function (match, n) {\n    return primitives[n];\n  });\n};\n/**\n * Strip YAML comments from the string\n *\n * The 2.0 yaml parser doesn't allow comment-only or blank lines.  Strip them.\n *\n * @protected\n * @method stripYamlComments\n * @param fileStr {string} The string to strip comments from\n * @return {string} The string with comments stripped.\n */\n\n\nParser.stripYamlComments = function (fileStr) {\n  // First replace removes comment-only lines\n  // Second replace removes blank lines\n  return fileStr.replace(/^\\s*#.*/mg, '').replace(/^\\s*[\\n|\\r]+/mg, '');\n};\n/**\n * Parses the environment variable to the boolean equivalent.\n * Defaults to false\n *\n * @param {String} content - Environment variable value\n * @return {boolean} - Boolean value fo the passed variable value\n */\n\n\nParser.booleanParser = function (filename, content) {\n  return content === 'true';\n};\n/**\n * Parses the environment variable to the number equivalent.\n * Defaults to undefined\n *\n * @param {String} content - Environment variable value\n * @return {Number} - Number value fo the passed variable value\n */\n\n\nParser.numberParser = function (filename, content) {\n  const numberValue = Number(content);\n  return Number.isNaN(numberValue) ? undefined : numberValue;\n};\n\nvar order = ['js', 'cjs', 'ts', 'json', 'json5', 'hjson', 'toml', 'coffee', 'iced', 'yaml', 'yml', 'cson', 'properties', 'xml', 'boolean', 'number'];\nvar definitions = {\n  cjs: Parser.jsParser,\n  coffee: Parser.coffeeParser,\n  cson: Parser.csonParser,\n  hjson: Parser.hjsonParser,\n  iced: Parser.icedParser,\n  js: Parser.jsParser,\n  json: Parser.jsonParser,\n  json5: Parser.json5Parser,\n  properties: Parser.propertiesParser,\n  toml: Parser.tomlParser,\n  ts: Parser.tsParser,\n  xml: Parser.xmlParser,\n  yaml: Parser.yamlParser,\n  yml: Parser.yamlParser,\n  boolean: Parser.booleanParser,\n  number: Parser.numberParser\n};\n\nParser.getParser = function (name) {\n  return definitions[name];\n};\n\nParser.setParser = function (name, parser) {\n  definitions[name] = parser;\n\n  if (order.indexOf(name) === -1) {\n    order.push(name);\n  }\n};\n\nParser.getFilesOrder = function (name) {\n  if (name) {\n    return order.indexOf(name);\n  }\n\n  return order;\n};\n\nParser.setFilesOrder = function (name, newIndex) {\n  if (Array.isArray(name)) {\n    return order = name;\n  }\n\n  if (typeof newIndex === 'number') {\n    var index = order.indexOf(name);\n    order.splice(newIndex, 0, name);\n\n    if (index > -1) {\n      order.splice(index >= newIndex ? index + 1 : index, 1);\n    }\n  }\n\n  return order;\n};","map":{"version":3,"names":["Yaml","VisionmediaYaml","Coffee","Iced","CSON","PPARSER","JSON5","TOML","HJSON","XML","COFFEE_2_DEP","COFFEE_DEP","ICED_DEP","JS_YAML_DEP","YAML_DEP","JSON5_DEP","HJSON_DEP","TOML_DEP","CSON_DEP","PPARSER_DEP","XML_DEP","TS_DEP","Parser","module","exports","parse","filename","content","parserName","substr","lastIndexOf","definitions","xmlParser","require","x2js","configObject","xml2js","rootKeys","Object","keys","length","jsParser","tsParser","extensions","register","lazy","transpileOnly","compilerOptions","allowJs","default","coffeeParser","e","icedParser","yamlParser","load","eval","stripYamlComments","console","error","jsonParser","JSON","name","message","indexOf","json5Parser","hjsonParser","tomlParser","csonParser","parseSync","stripComments","propertiesParser","namespaces","variables","sections","fileStr","stringRegex","uid","Date","primitives","primIndex","replace","match","$1","$2","RegExp","n","booleanParser","numberParser","numberValue","Number","isNaN","undefined","order","cjs","coffee","cson","hjson","iced","js","json","json5","properties","toml","ts","xml","yaml","yml","boolean","number","getParser","setParser","parser","push","getFilesOrder","setFilesOrder","newIndex","Array","isArray","index","splice"],"sources":["/Users/jonathanharris/Desktop/devCodeCamp/Week9/Projects/Capstone/frontend/node_modules/config/parser.js"],"sourcesContent":["// External libraries are lazy-loaded only if these file types exist.\nvar Yaml = null,\n    VisionmediaYaml = null,\n    Coffee = null,\n    Iced = null,\n    CSON = null,\n    PPARSER = null,\n    JSON5 = null,\n    TOML = null,\n    HJSON = null,\n    XML = null;\n\n// Define soft dependencies so transpilers don't include everything\nvar COFFEE_2_DEP = 'coffeescript',\n    COFFEE_DEP = 'coffee-script',\n    ICED_DEP = 'iced-coffee-script',\n    JS_YAML_DEP = 'js-yaml',\n    YAML_DEP = 'yaml',\n    JSON5_DEP = 'json5',\n    HJSON_DEP = 'hjson',\n    TOML_DEP = 'toml',\n    CSON_DEP = 'cson',\n    PPARSER_DEP = 'properties',\n    XML_DEP = 'x2js',\n    TS_DEP = 'ts-node';\n\nvar Parser = module.exports;\n\nParser.parse = function(filename, content) {\n  var parserName = filename.substr(filename.lastIndexOf('.') +1);  // file extension\n  if (typeof definitions[parserName] === 'function') {\n    return definitions[parserName](filename, content);\n  }\n  // TODO: decide what to do in case of a missing parser\n};\n\nParser.xmlParser = function(filename, content) {\n  if (!XML) {\n    XML = require(XML_DEP);\n  }\n  var x2js = new XML();\n  var configObject = x2js.xml2js(content);\n  var rootKeys = Object.keys(configObject);\n  if(rootKeys.length === 1) {\n    return configObject[rootKeys[0]];\n  }\n  return configObject;\n};\n\nParser.jsParser = function(filename, content) {\n  return require(filename);\n};\n\nParser.tsParser = function(filename, content) {\n  if (!require.extensions['.ts']) {\n    require(TS_DEP).register({\n      lazy: true,\n      transpileOnly: true,\n      compilerOptions: {\n        allowJs: true,\n      }\n    });\n  }\n\n  // Imports config if it is exported via module.exports = ...\n  // See https://github.com/lorenwest/node-config/issues/524\n  var configObject = require(filename);\n\n  // Because of ES6 modules usage, `default` is treated as named export (like any other)\n  // Therefore config is a value of `default` key.\n  if (configObject.default) {\n    return configObject.default\n  }\n  return configObject;\n};\n\nParser.coffeeParser = function(filename, content) {\n  // .coffee files can be loaded with either coffee-script or iced-coffee-script.\n  // Prefer iced-coffee-script, if it exists.\n  // Lazy load the appropriate extension\n  if (!Coffee) {\n    Coffee = {};\n\n    // The following enables iced-coffee-script on .coffee files, if iced-coffee-script is available.\n    // This is commented as per a decision on a pull request.\n    //try {\n    //  Coffee = require('iced-coffee-script');\n    //}\n    //catch (e) {\n    //  Coffee = require('coffee-script');\n    //}\n    try {\n      // Try to load coffeescript\n      Coffee = require(COFFEE_2_DEP);\n    }\n    catch (e) {\n      // If it doesn't exist, try to load it using the deprecated module name\n      Coffee = require(COFFEE_DEP);\n    }\n    // coffee-script >= 1.7.0 requires explicit registration for require() to work\n    if (Coffee.register) {\n      Coffee.register();\n    }\n  }\n  // Use the built-in parser for .coffee files with coffee-script\n  return require(filename);\n};\n\nParser.icedParser = function(filename, content) {\n  Iced = require(ICED_DEP);\n\n  // coffee-script >= 1.7.0 requires explicit registration for require() to work\n  if (Iced.register) {\n    Iced.register();\n  }\n};\n\nParser.yamlParser = function(filename, content) {\n  if (!Yaml && !VisionmediaYaml) {\n    // Lazy loading\n    try {\n      // Try to load the better js-yaml module\n      Yaml = require(JS_YAML_DEP);\n    }\n    catch (e) {\n      try {\n        // If it doesn't exist, load the fallback visionmedia yaml module.\n        VisionmediaYaml = require(YAML_DEP);\n      }\n      catch (e) { }\n    }\n  }\n  if (Yaml) {\n    return Yaml.load(content);\n  }\n  else if (VisionmediaYaml) {\n    // The yaml library doesn't like strings that have newlines but don't\n    // end in a newline: https://github.com/visionmedia/js-yaml/issues/issue/13\n    content += '\\n';\n    if (typeof VisionmediaYaml.eval === 'function') {\n      return VisionmediaYaml.eval(Parser.stripYamlComments(content));\n    }\n    return VisionmediaYaml.parse(Parser.stripYamlComments(content));\n  }\n  else {\n    console.error('No YAML parser loaded.  Suggest adding js-yaml dependency to your package.json file.')\n  }\n};\n\nParser.jsonParser = function(filename, content) {\n  try {\n    return JSON.parse(content);\n  }\n  catch (e) {\n    // All JS Style comments will begin with /, so all JSON parse errors that\n    // encountered a syntax error will complain about this character.\n    if (e.name !== 'SyntaxError' || e.message.indexOf('Unexpected token /') !== 0) {\n      throw e;\n    }\n    if (!JSON5) {\n      JSON5 = require(JSON5_DEP);\n    }\n    return JSON5.parse(content);\n  }\n};\n\nParser.json5Parser = function(filename, content) {\n  if (!JSON5) {\n    JSON5 = require(JSON5_DEP);\n  }\n  return JSON5.parse(content);\n};\n\nParser.hjsonParser = function(filename, content) {\n  if (!HJSON) {\n    HJSON = require(HJSON_DEP);\n  }\n  return HJSON.parse(content);\n};\n\nParser.tomlParser = function(filename, content) {\n  if(!TOML) {\n    TOML = require(TOML_DEP);\n  }\n  return TOML.parse(content);\n};\n\nParser.csonParser = function(filename, content) {\n  if (!CSON) {\n    CSON = require(CSON_DEP);\n  }\n  // Allow comments in CSON files\n  if (typeof CSON.parseSync === 'function') {\n    return CSON.parseSync(Parser.stripComments(content));\n  }\n  return CSON.parse(Parser.stripComments(content));\n};\n\nParser.propertiesParser = function(filename, content) {\n  if (!PPARSER) {\n    PPARSER = require(PPARSER_DEP);\n  }\n  return PPARSER.parse(content, { namespaces: true, variables: true, sections: true });\n};\n\n/**\n * Strip all Javascript type comments from the string.\n *\n * The string is usually a file loaded from the O/S, containing\n * newlines and javascript type comments.\n *\n * Thanks to James Padolsey, and all who contributed to this implementation.\n * http://james.padolsey.com/javascript/javascript-comment-removal-revisted/\n *\n * @protected\n * @method stripComments\n * @param fileStr {string} The string to strip comments from\n * @param stringRegex {RegExp} Optional regular expression to match strings that\n *   make up the config file\n * @return {string} The string with comments stripped.\n */\nParser.stripComments = function(fileStr, stringRegex) {\n  stringRegex = stringRegex || /(['\"])(\\\\\\1|.)+?\\1/g;\n\n  var uid = '_' + +new Date(),\n    primitives = [],\n    primIndex = 0;\n\n  return (\n    fileStr\n\n    /* Remove strings */\n      .replace(stringRegex, function(match){\n        primitives[primIndex] = match;\n        return (uid + '') + primIndex++;\n      })\n\n      /* Remove Regexes */\n      .replace(/([^\\/])(\\/(?!\\*|\\/)(\\\\\\/|.)+?\\/[gim]{0,3})/g, function(match, $1, $2){\n        primitives[primIndex] = $2;\n        return $1 + (uid + '') + primIndex++;\n      })\n\n      /*\n      - Remove single-line comments that contain would-be multi-line delimiters\n          E.g. // Comment /* <--\n      - Remove multi-line comments that contain would be single-line delimiters\n          E.g. /* // <--\n     */\n      .replace(/\\/\\/.*?\\/?\\*.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]*?\\/\\/[\\s\\S]*?\\*\\//g, '')\n\n      /*\n      Remove single and multi-line comments,\n      no consideration of inner-contents\n     */\n      .replace(/\\/\\/.+?(?=\\n|\\r|$)|\\/\\*[\\s\\S]+?\\*\\//g, '')\n\n      /*\n      Remove multi-line comments that have a replaced ending (string/regex)\n      Greedy, so no inner strings/regexes will stop it.\n     */\n      .replace(RegExp('\\\\/\\\\*[\\\\s\\\\S]+' + uid + '\\\\d+', 'g'), '')\n\n      /* Bring back strings & regexes */\n      .replace(RegExp(uid + '(\\\\d+)', 'g'), function(match, n){\n        return primitives[n];\n      })\n  );\n\n};\n\n/**\n * Strip YAML comments from the string\n *\n * The 2.0 yaml parser doesn't allow comment-only or blank lines.  Strip them.\n *\n * @protected\n * @method stripYamlComments\n * @param fileStr {string} The string to strip comments from\n * @return {string} The string with comments stripped.\n */\nParser.stripYamlComments = function(fileStr) {\n  // First replace removes comment-only lines\n  // Second replace removes blank lines\n  return fileStr.replace(/^\\s*#.*/mg,'').replace(/^\\s*[\\n|\\r]+/mg,'');\n};\n\n/**\n * Parses the environment variable to the boolean equivalent.\n * Defaults to false\n *\n * @param {String} content - Environment variable value\n * @return {boolean} - Boolean value fo the passed variable value\n */\nParser.booleanParser = function(filename, content) {\n  return content === 'true';\n};\n\n/**\n * Parses the environment variable to the number equivalent.\n * Defaults to undefined\n *\n * @param {String} content - Environment variable value\n * @return {Number} - Number value fo the passed variable value\n */\nParser.numberParser = function(filename, content) {\n  const numberValue = Number(content);\n  return Number.isNaN(numberValue) ? undefined : numberValue;\n};\n\nvar order = ['js', 'cjs', 'ts', 'json', 'json5', 'hjson', 'toml', 'coffee', 'iced', 'yaml', 'yml', 'cson', 'properties', 'xml',\n  'boolean', 'number'];\nvar definitions = {\n  cjs: Parser.jsParser,\n  coffee: Parser.coffeeParser,\n  cson: Parser.csonParser,\n  hjson: Parser.hjsonParser,\n  iced: Parser.icedParser,\n  js: Parser.jsParser,\n  json: Parser.jsonParser,\n  json5: Parser.json5Parser,\n  properties: Parser.propertiesParser,\n  toml: Parser.tomlParser,\n  ts: Parser.tsParser,\n  xml: Parser.xmlParser,\n  yaml: Parser.yamlParser,\n  yml: Parser.yamlParser,\n  boolean: Parser.booleanParser,\n  number: Parser.numberParser\n};\n\nParser.getParser = function(name) {\n  return definitions[name];\n};\n\nParser.setParser = function(name, parser) {\n  definitions[name] = parser;\n  if (order.indexOf(name) === -1) {\n    order.push(name);\n  }\n};\n\nParser.getFilesOrder = function(name) {\n  if (name) {\n    return order.indexOf(name);\n  }\n  return order;\n};\n\nParser.setFilesOrder = function(name, newIndex) {\n  if (Array.isArray(name)) {\n    return order = name;\n  }\n  if (typeof newIndex === 'number') {\n    var index = order.indexOf(name);\n    order.splice(newIndex, 0, name);\n    if (index > -1) {\n      order.splice(index >= newIndex ? index +1 : index, 1);\n    }\n  }\n  return order;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}